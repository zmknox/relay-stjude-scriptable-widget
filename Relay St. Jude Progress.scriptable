{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "yellow",
    "glyph" : "heart"
  },
  "name" : "Relay St. Jude Progress",
  "script" : "\/\/ config\nconst width = 320;\nconst primaryTextColor = new Color(\"#efefef\");\n\nconst widget = new ListWidget();\nwidget.setPadding(8, 15, 8, 10);\n\n\/\/ widget background\nconst gradient = new LinearGradient();\ngradient.colors = [    \n    new Color(`#dcb748`),\n    new Color(`#d6aa29`)\n];\ngradient.locations = [0.0, 1];\nwidget.backgroundGradient = gradient;\n\nwidget.url = \"https:\/\/stjude.org\/relay\";\n\n\/\/ api request\nconst req = new Request('https:\/\/api.tiltify.com');\nreq.headers = {    \n  'Content-Type': 'application\/json'\n};\nreq.method = \"POST\";\nreq.body = JSON.stringify({\n\t\"operationName\": \"get_campaign_by_vanity_and_slug\",\n\t\"variables\": {\"vanity\": \"@relay-fm\", \"slug\": \"relay-st-jude-21\"},\n\t\"query\": `query get_campaign_by_vanity_and_slug($vanity: String, $slug: String) {\n  campaign(vanity: $vanity, slug: $slug) {\n    id\n    name\n    slug\n    status\n    originalGoal {\n      value\n      currency\n    }\n    team {\n      name\n    }\n    description\n    totalAmountRaised {\n      currency\n      value\n    }\n    goal {\n      currency\n      value\n    }\n    avatar {\n      alt\n      height\n      width\n      src\n    }\n    milestones {\n      id\n      name\n      amount {\n        value\n        currency\n      }\n    }\n  }\n}`\n});\nlet body = await req.loadJSON();\n\n\/\/ the important numbers (converting to float so we can run toLocaleString on them)\nconst soFar = parseFloat(body.data.campaign.totalAmountRaised.value);\nconst total = parseFloat(body.data.campaign.goal.value);\n\n\/\/ build widget\n\/\/ heading\nconst titleText = widget.addText(body.data.campaign.name);\ntitleText.textColor = primaryTextColor;\ntitleText.font = Font.boldSystemFont(24);\n\nwidget.addSpacer(8);\n\n\/\/ soFar \/ total in text\nconst amountText = widget.addText(`$${soFar.toLocaleString()} \/ $${total.toLocaleString()}`);\namountText.textColor = primaryTextColor;\namountText.font = Font.heavyRoundedSystemFont(20);\n\nwidget.addSpacer(6);\n\n\/\/ progress bar & percentage\nconst progressBar = widget.addImage(createProgressBar(total, soFar, 20, true));\nprogressBar.imageSize = new Size(width, 20);\n\nwidget.addSpacer(4);\n\n\/\/ only show as many milestones as the user requests\n\/\/ (1 looks good on a medium widget, 3 or 4 on a large)\nlet maxMilestones = args.widgetParameter;\nlet milestonesDisplayed = 0;\n\/\/ progress bars for milestones\nfor (let milestone of body.data.campaign.milestones) {\n    if (maxMilestones != undefined && milestonesDisplayed >= maxMilestones) {\n        break;\n    }\n    \n    \/\/ calculate milestone percentage\n    const milestoneTotal = parseFloat(milestone.amount.value);\n    const percentage = (soFar \/ milestoneTotal) * 100;\n    \n    \/\/ if the milestone is long past, no need to show it\n    if (percentage < 110) {    \n        widget.addSpacer(6);\n        \n        \/\/ a stack will let us put the name and percentage side by side\n        const stack = widget.addStack();\n        stack.spacing = 4;\n    \n        \/\/ milestone name\n        const milestoneNameText = stack.addText(milestone.name);\n        milestoneNameText.textColor = primaryTextColor;\n        milestoneNameText.font = Font.boldSystemFont(16);\n        milestoneNameText.lineLimit = 2;\n        \n        \/\/ milestone percentage\n        const percentageFixed = percentage.toFixed(2);\n        const percentageText = stack.addText(`${percentageFixed}%`);\n        percentageText.textColor = primaryTextColor;\n        percentageText.font = Font.regularRoundedSystemFont(16);\n        \n        widget.addSpacer(6);\n    \n        \/\/ milestone progress bar\n        const milestoneProgressBar = widget.addImage(createProgressBar(milestoneTotal, soFar, 10, false));    \n        milestoneProgressBar.imageSize = new Size(width, 10);\n        \n        milestonesDisplayed += 1;\n    }\n}\n\n\nScript.setWidget(widget);\nScript.complete();\nwidget.presentLarge();\n\nfunction createProgressBar(total, soFar, height, showPercentage = false) {\n    const context = new DrawContext();\n    context.size = new Size(width, height);\n    context.opaque = false;\n    context.respectScreenScale = true;\n    \n    \/\/ bar background\n    context.setFillColor(new Color(\"#48484b\"));\n    const bgPath = new Path();\n    bgPath.addRoundedRect(new Rect(0, 0, width, height), height \/ 2, (height \/ 2) - 1);\n    context.addPath(bgPath);\n    context.fillPath();\n    \n    \/\/ bar foreground\n    context.setFillColor(new Color(\"#00b100\"));\n    const fgPath = new Path();\n    fgPath.addRoundedRect(new Rect(0, 0, (width * soFar)\/total, height), height \/ 2, (height \/ 2) - 1);\n    context.addPath(fgPath);\n    context.fillPath();\n    \n    \/\/ percentage text\n    if (showPercentage) {\n        const percentage = ((soFar \/ total) * 100).toFixed(2);\n        let xPos = (width * soFar)\/total + 5;\n        \/\/ if over 70%, show in foreground area\n        \/\/ to ensure that it doesnt overflow the display\n        if (percentage > 70) {\n            xPos = (width * soFar)\/total - 55;\n        }\n        context.setFont(Font.semiboldRoundedSystemFont(14));\n        context.setTextColor(primaryTextColor);\n        context.drawText(`${percentage}%`, new Point(xPos, (height \/ 14)));\n    }\n\n    return context.getImage();\n}\n\n",
  "share_sheet_inputs" : [

  ]
}